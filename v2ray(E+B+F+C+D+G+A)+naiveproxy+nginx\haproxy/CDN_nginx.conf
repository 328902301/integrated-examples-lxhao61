#使用多组域名实现CDN应用与正常应用共存配置
#原配置参数：
#.........<省略>........
stream {
    map $ssl_preread_server_name $backend_name {
        zv.xx.yy  vless; #zv.xx.yy修改成自己规划对应vless+tcp+tls的域名
        zt.xx.yy trojan; #zt.xx.yy修改成自己规划对应trojan+tcp+tls的域名
        zh.xx.yy  https; #zh.xx.yy修改成自己规划对应https server的域名
    }
#.........<省略>........

#以上参数修改如下：
#.........<省略>........
stream {
    map $ssl_preread_server_name $backend_name {
        zv.xx.yy  vless; #zv.xx.yy修改成自己规划对应vless+tcp+tls的域名
        zt.xx.yy trojan; #zt.xx.yy修改成自己规划对应trojan+tcp+tls的域名
        zh.xx.yy  https; #zh.xx.yy修改成自己规划对应https server的域名
        z1.xx.yy  vless; #z1.xx.yy修改成自己规划对应vless+ws+tls的CDN应用域名
        z2.xx.yy trojan; #z2.xx.yy修改成自己规划对应SS+v2ray-plugin+tls的CDN应用域名
        z3.xx.yy  http2; #z3.xx.yy修改成自己规划对应vless+grpc+tls的CDN应用域名
    }
#.........<省略>........
#以下参数是增加的，为vless+grpc+tls应用提供反代。
    upstream http2 {
        #server 127.0.0.1:2443; #转给http/2 server本地监听端口（端口转发）
        server unix:/dev/shm/http2.sock; #转给http/2 server监听进程（进程转发）
#上两条参数二选一，与整体配置一致即可。可删除其一或用#屏蔽之一来选择。
    }
#.........<省略>........

http {
    include             mime.types;
    default_type        application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for" '
    #                  '$proxy_protocol_addr:$proxy_protocol_port';

    #access_log  /var/log/nginx/access.log  main;
#上五条屏蔽参数与PROXY protocol是否启用有关，若启用请去掉#，否则不管它或直接删除。
    sendfile            on;
    keepalive_timeout   65;

    server {
        #listen 127.0.0.1:2443 ssl http2 proxy_protocol; #http/2 server本地监听端口，并启用PROXY protocol接收。（端口转发）
        #set_real_ip_from 127.0.0.1; #注意：如SNI分流中没有启用PROXY protocol发送，此条参数删除，并且上边参数去除 proxy_protocol。
        listen unix:/dev/shm/http2.sock ssl http2 proxy_protocol; #http/2 server监听进程，并启用PROXY protocol接收。（进程转发）
        set_real_ip_from unix:; #注意：如SNI分流中没有启用PROXY protocol发送，此条参数删除，并且上边参数去除 proxy_protocol。
#上两组参数二选一，与上边配置对应即可。可删除其一或用#来屏蔽之一来选择。
        server_name z3.xx.yy; #限定域名访问（禁止以ip方式访问网站），修改成自己的SNI分流对应域名。

        ssl_certificate /home/tls/certificates/acme-v02.api.letsencrypt.org-directory/z3.xx.yy/z3.xx.yy.crt; #换成你的证书，绝对路径。
        ssl_certificate_key /home/tls/certificates/acme-v02.api.letsencrypt.org-directory/z3.xx.yy/z3.xx.yy.key; #换成你的密钥，绝对路径。

        ssl_protocols TLSv1.2 TLSv1.3; #TLSv1.3可能需要源码编译才支持，见此部分README.md说明。
        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305;
        ssl_prefer_server_ciphers on;

        location /cdngrpc { #与vless+grpc应用中serviceName对应
            grpc_pass grpc://127.0.0.1:2009; #转发给本机vless+grpc监听端口
        }

        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; #启用HSTS
        location / {
            root /var/www/html/; #修改成自己存放的web文件路径
            index  index.html index.htm;
        }
    }
}
#注意：
#1、如采用caddy申请证书，推荐申请普通证书（不受条件限制）。采用普通证书需要在Xray\v2ray配置中增加两组证书及密钥配置（见CDN_patch_v2ray_config.json文件），另外caddy还需调增加上述域名证书申请及限定域名访问。
#2、如采用第三方提供证书，请采用通配符域名（一个通配符证书及密钥搞定所有二级域名）来实现SNI分流。
#3、添加了http/2应用来反代grpc应用。
